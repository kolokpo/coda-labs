{"version":3,"sources":["assets/images sync /^/.*/.png$","assets/images/1.png","assets/images/2.png","assets/images/3.png","assets/images/4.png","assets/images/5.png","Scrollyteller.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","narration","require","narrativeStyle","css","Narrative","props","onStepEnter","element","data","setState","console","log","onStepExit","style","backgroundColor","onStepProgress","progress","update","src","state","this","className","Card","Img","variant","offset","narr","key","Body","Text","description","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gcAAA,IAAIA,EAAM,CACT,UAAW,GACX,UAAW,GACX,UAAW,GACX,UAAW,GACX,UAAW,IAIZ,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gBC1BpBU,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,o6CCK3C,IAAMC,EAAYC,EAAQ,IAGpBC,EAAiBC,YAAH,KAoECC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,YAAc,YAAuB,EAApBC,QAAqB,IAAZC,EAAW,EAAXA,KACxB,EAAKC,SAAU,CAAED,SACjBE,QAAQC,IAAIH,IAXK,EAenBI,WAAY,YAAiB,EAAdL,QACLM,MAAMC,gBAAkB,QAhBf,EAmBnBC,eAAiB,YAA2B,EAAxBR,QAAyB,IAAhBS,EAAe,EAAfA,SAC3B,EAAKP,SAAS,CAAEO,cApBC,EAuBnBC,OAAS,SAAAT,GACP,IAAIU,EAAM,mBAAqBV,EAAO,OACtC,EAAKC,SAAS,CAACS,SAvBf,EAAKC,MAAQ,CACXX,KAAM,IACNQ,SAAU,EACVE,IAAK,IALU,E,qDA6BT,IACAV,EAASY,KAAKD,MAAdX,KACRE,QAAQC,IAAIH,GACZ,IAAMU,EAAM,mBAAqBV,EAAO,OAGxC,OAFAE,QAAQC,IAAIO,GAGV,uBACE,mBAAKf,IAAKD,GACR,mBAAKmB,UAAU,QACb,mBAAKA,UAAU,WACf,YAACC,EAAA,EAAD,KACE,YAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMN,IAAKjB,MAAQ,YAAmBmB,KAAKD,MAAMX,KAA/B,aAGtC,mBAAKa,UAAU,YACb,YAAC,IAAD,CAAWA,UAAU,YACnBf,YAAac,KAAKd,YAClBM,WAAYQ,KAAKR,WACjBI,UAAQ,EACRD,eAAgBK,KAAKL,eACrBU,OAAQ,KAEPzB,EAAUf,KAAM,SAAAyC,GAAI,OACnB,YAAC,IAAD,CAAMlB,KAAMkB,EAAKC,IAAKA,IAAKD,EAAKC,KAC9B,mBAAKN,UAAU,QACb,iBAAGA,UAAY,OAAOjC,GAAI,OAASsC,EAAKC,KACtC,YAACL,EAAA,EAAD,KACE,YAACA,EAAA,EAAKM,KAAN,KACE,YAACN,EAAA,EAAKO,KAAN,KAAYH,EAAKI,8B,GA3DNC,aClExBC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.df768cb2.chunk.js","sourcesContent":["var map = {\n\t\"./1.png\": 24,\n\t\"./2.png\": 25,\n\t\"./3.png\": 26,\n\t\"./4.png\": 27,\n\t\"./5.png\": 28\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 23;","module.exports = __webpack_public_path__ + \"static/media/1.5f1fbf63.png\";","module.exports = __webpack_public_path__ + \"static/media/2.59cf1f22.png\";","module.exports = __webpack_public_path__ + \"static/media/3.89e9faa5.png\";","module.exports = __webpack_public_path__ + \"static/media/4.e125a1b3.png\";","module.exports = __webpack_public_path__ + \"static/media/5.6092fa6a.png\";","/** @jsx jsx */\r\nimport { Component } from 'react';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { Card } from \"react-bootstrap\";\r\nimport { Scrollama, Step } from 'react-scrollama';\r\nconst narration = require(\"./assets/data/narration.json\");\r\n\r\n\r\nconst narrativeStyle = css`\r\n  img {\r\n    max-width: 800px;\r\n  }\r\n  .main {\r\n    padding: 10vh 2vw;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  .graphic {\r\n    flex-basis: 80%;\r\n    position: sticky;\r\n    top: 15vh;\r\n    width: 100%;\r\n    height: 75vh;\r\n    align-self: flex-start;\r\n  }\r\n  .data {\r\n    font-size: 5rem;\r\n    text-align: center\r\n  }\r\n  .scroller {\r\n    background-color: #0E0004;\r\n    flex-basis: 30%;\r\n  }\r\n  .card-text {\r\n    background-color: #0E0004;\r\n    color: white;\r\n    font-size: 18px !important;\r\n    line-height: 1.3;\r\n  }\r\n  .scrollama {\r\n    background-color: #0E0004;\r\n  }\r\n  .step {\r\n    background-color: #0E0004;\r\n    margin-right: 50px;\r\n    padding-top: 200px;\r\n    padding-bottom: 200px;\r\n    '&:last-child': {\r\n      margin-bottom: 0;\r\n    }\r\n    font-size: 20px;\r\n  }\r\n  .card {\r\n    background-color: #0E0004;\r\n    box-shadow: 0 5px 10px 0 rgba(0, 0, 0, 0.25);\r\n    margin-left: 10px;\r\n    margin-right:0px;\r\n    text-align: center;\r\n    padding: 5%;\r\n  }\r\n  .desc {\r\n    background-color: #0E0004;\r\n    margin-left:20px;\r\n    margin-right:20px;\r\n  }\r\n  .btn {\r\n    color: #575757;\r\n  }\r\n  .card-text-s {\r\n    background-color: #0E0004;\r\n    padding: 10%;\r\n    font-size: 24px !important;\r\n  }\r\n`\r\n;\r\n\r\nexport default class Narrative extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: \"1\",\r\n      progress: 0,\r\n      src: \"\"\r\n    }\r\n  }\r\n\r\n  onStepEnter = ({ element, data }) => {\r\n    this.setState( { data });\r\n    console.log(data)\r\n    //this.update(data);\r\n  }\r\n\r\n  onStepExit= ({ element }) => {\r\n    element.style.backgroundColor = '#fff';\r\n  }\r\n\r\n  onStepProgress = ({ element, progress }) => {\r\n    this.setState({ progress });\r\n  }\r\n\r\n  update = data => {\r\n    var src = \"./assets/images/\" + data + \".png\";\r\n    this.setState({src});\r\n  }\r\n\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n    console.log(data)\r\n    const src = './assets/images/' + data + '.png';\r\n    console.log(src)\r\n\r\n    return (\r\n      <div>\r\n        <div css={narrativeStyle}>\r\n          <div className='main'>\r\n            <div className='graphic'>\r\n            <Card>\r\n              <Card.Img variant=\"top\" src={require(`./assets/images/${this.state.data}.png`)}/>\r\n            </Card>\r\n            </div>\r\n            <div className='scroller'>\r\n              <Scrollama className='scrollama'\r\n                onStepEnter={this.onStepEnter}\r\n                onStepExit={this.onStepExit}\r\n                progress\r\n                onStepProgress={this.onStepProgress}\r\n                offset={0.33}\r\n              >\r\n                {narration.map ( narr => (\r\n                  <Step data={narr.key} key={narr.key}>\r\n                    <div className=\"step\" >\r\n                      <p className = \"desc\" id={\"desc\" + narr.key}>\r\n                        <Card>\r\n                          <Card.Body>\r\n                            <Card.Text>{narr.description}</Card.Text>\r\n                          </Card.Body>\r\n                        </Card>\r\n                      </p>\r\n                    </div>\r\n                  </Step>\r\n                ))}\r\n              </Scrollama>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Scrollyteller from './Scrollyteller.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <Scrollyteller/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}